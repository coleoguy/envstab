imp.loci <- sample(1:loci, 10)
#what phenotype is favored in the environment
fav.pheno <- runif(1, min=0, max=20)
iterations <- 2
mut.rate <- .01
model <- c("additive"  , "epi.sign", "epi.inc","epi.dec")
foo <- simulate(loci=100, chrom.num =10, popsize=500, generations=200, prob.change=.05,
mut.rate=.01, model="additive")
View(GetRecomb)
View(GetGametes)
source("~/Documents/Env.Stab Project/functions.R", echo=TRUE)
foo <- simulate(loci=100, chrom.num =10, popsize=500, generations=200, prob.change=.05,
mut.rate=.01, model="additive")
loci <- 100
popsize <- 100
chrom.num <- c(5, 10, 15, 20, 25)
generations <- 3
#probbility that the favored phenotype for the environment will change
prob.change <- c(.01, .1, .3)
#loci that will impact the pheonotype
imp.loci <- sample(1:loci, 10)
#what phenotype is favored in the environment
fav.pheno <- runif(1, min=0, max=20)
iterations <- 2
mut.rate <- .01
model <- c("additive"  , "epi.sign", "epi.inc","epi.dec")
foo <- simulate(loci=100, chrom.num =10, popsize=500, generations=200, prob.change=.05,
mut.rate=.01, model="additive")
plot(foo[[1]])
plot(foo$mean.phenotypes)
View(foo)
source("~/Documents/Env.Stab Project/functions.R", echo=TRUE)
loci <- 100
popsize <- 100
chrom.num <- c(5, 10, 15, 20, 25)
generations <- 3
#probbility that the favored phenotype for the environment will change
prob.change <- c(.01, .1, .3)
#loci that will impact the pheonotype
imp.loci <- sample(1:loci, 10)
#what phenotype is favored in the environment
fav.pheno <- runif(1, min=0, max=20)
iterations <- 2
mut.rate <- .01
model <- c("additive"  , "epi.sign", "epi.inc","epi.dec")
simulate(loci=100, chrom.num =10, popsize=500, generations=200, prob.change=.05,
mut.rate=.01, model="additive")
plot(foo$opt.pheno)
foo <- simulate(loci=100, chrom.num =10, popsize=500, generations=200, prob.change=.05,
mut.rate=.01, model="additive")
source("~/Documents/Env.Stab Project/functions.R", echo=TRUE)
loci <- 100
popsize <- 100
chrom.num <- c(5, 10, 15, 20, 25)
generations <- 3
#probbility that the favored phenotype for the environment will change
prob.change <- c(.01, .1, .3)
#loci that will impact the pheonotype
imp.loci <- sample(1:loci, 10)
#what phenotype is favored in the environment
fav.pheno <- runif(1, min=0, max=20)
iterations <- 2
mut.rate <- .01
model <- c("additive"  , "epi.sign", "epi.inc","epi.dec")
foo <- simulate(loci=100, chrom.num =10, popsize=500, generations=200, prob.change=.05,
mut.rate=.01, model="additive")
source("~/Documents/Env.Stab Project/functions.R", echo=TRUE)
loci <- 100
popsize <- 100
chrom.num <- c(5, 10, 15, 20, 25)
generations <- 3
#probbility that the favored phenotype for the environment will change
prob.change <- c(.01, .1, .3)
#loci that will impact the pheonotype
imp.loci <- sample(1:loci, 10)
#what phenotype is favored in the environment
fav.pheno <- runif(1, min=0, max=20)
iterations <- 2
mut.rate <- .01
model <- c("additive"  , "epi.sign", "epi.inc","epi.dec")
foo <- simulate(loci=100, chrom.num =10, popsize=500, generations=200, prob.change=.05,
mut.rate=.01, model="additive")
source("~/Documents/Env.Stab Project/script.R", echo=TRUE)
source("~/Documents/Env.Stab Project/functions.R", echo=TRUE)
source("~/Documents/Env.Stab Project/script.R", echo=TRUE)
source("~/Documents/Env.Stab Project/script.R", echo=TRUE)
source("~/Documents/Env.Stab Project/functions.R", echo=TRUE)
loci <- 100
popsize <- 100
chrom.num <- c(5, 10, 15, 20, 25)
generations <- 3
#probbility that the favored phenotype for the environment will change
prob.change <- c(.01, .1, .3)
#loci that will impact the pheonotype
imp.loci <- sample(1:loci, 10)
#what phenotype is favored in the environment
fav.pheno <- runif(1, min=0, max=20)
iterations <- 2
mut.rate <- .01
model <- c("additive"  , "epi.sign", "epi.inc","epi.dec")
foo <- simulate(loci=100, chrom.num =10, popsize=500, generations=200, prob.change=.05,
mut.rate=.01, model="additive")
View(foo)
source("~/Documents/Env.Stab Project/functions.R", echo=TRUE)
loci <- 100
popsize <- 100
chrom.num <- c(5, 10, 15, 20, 25)
generations <- 3
#probbility that the favored phenotype for the environment will change
prob.change <- c(.01, .1, .3)
#loci that will impact the pheonotype
imp.loci <- sample(1:loci, 10)
#what phenotype is favored in the environment
fav.pheno <- runif(1, min=0, max=20)
iterations <- 2
mut.rate <- .01
model <- c("additive"  , "epi.sign", "epi.inc","epi.dec")
foo <- simulate(loci=100, chrom.num =10, popsize=500, generations=200, prob.change=.05,
mut.rate=.01, model="additive")
n
import sys
quit()
GetFit <- function(genome,
imp.loci, # what genes we keep track of and
# what will impact phenotype
fav.pheno,
model){ #dominance factor
# creating a vector in loci.w
loci.w <- c()
if(model == "additive"){
pheno <- sum(genome[,imp.loci])
w <- 1 - (abs(fav.pheno - pheno)/20)
}
if(model ==  "epi.sign"){
pheno <- 0
inv.eff <- colSums(genome[, imp.loci[1:5]])
for(i in 1:length(inv.eff)){
if(inv.eff[i] == 0){
pheno <- pheno + sum(genome[ , imp.loci[(5 + i)]]) * 2
}
if(inv.eff[i] == 1){
pheno <- pheno +  2
}
if(inv.eff[i] == 2){
pheno <- pheno + sum(as.numeric(!genome[ , imp.loci[(5 + i)]])) * 2
}
}
}
if (model== "epi.inc"){
x <- sum(genome[,imp.loci])
pheno <- (20*(x/20)^2)
}
if(model== "epi.dec"){
x <- sum(genome[,imp.loci])
pheno <- (13*log(x+1)/2)
}
w <- 1 - (abs(fav.pheno - pheno)/20)
return(w)
#returns product(multiplication) of fitness locations
}
prob.change <- 0.15
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1) <= prob.change
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
loci <- 10
popsize <- 10
population <- list()
#generates random uniform distribution to be the favored allele
p <- runif(100)
#calculates unfavored allele based on the frequency of favored allele
q <- 1-p
for(i in 1:popsize){
genome <- matrix(data = NA,
nrow = 2, #2 rows
ncol = loci) #number of columns is number of loci
for(j in 1:loci){
genome[, j] <- sample(x = c(0, 1), #0 or 1 allele
size = 2, #diploid
prob = c(p[j], q[j]), #probablility that it will be
#favored or unvavored
replace = T) #can resue 0,1, and 2
}
#genome stored for each individual in the population
population[[i]] <- genome
}
View(population)
population[[10]]
loci <- 110
popsize <- 110
population <- list()
#generates random uniform distribution to be the favored allele
p <- runif(100)
#calculates unfavored allele based on the frequency of favored allele
q <- 1-p
for(i in 1:popsize){
genome <- matrix(data = NA,
nrow = 2, #2 rows
ncol = loci) #number of columns is number of loci
for(j in 1:loci){
genome[, j] <- sample(x = c(0, 1), #0 or 1 allele
size = 2, #diploid
prob = c(p[j], q[j]), #probablility that it will be
#favored or unvavored
replace = T) #can resue 0,1, and 2
}
#genome stored for each individual in the population
population[[i]] <- genome
}
loci <- 100
population <- list()
#generates random uniform distribution to be the favored allele
p <- runif(100)
#calculates unfavored allele based on the frequency of favored allele
q <- 1-p
for(i in 1:popsize){
genome <- matrix(data = NA,
nrow = 2, #2 rows
ncol = loci) #number of columns is number of loci
for(j in 1:loci){
genome[, j] <- sample(x = c(0, 1), #0 or 1 allele
size = 2, #diploid
prob = c(p[j], q[j]), #probablility that it will be
#favored or unvavored
replace = T) #can resue 0,1, and 2
}
#genome stored for each individual in the population
population[[i]] <- genome
}
View(population)
population[[109]]
chrom.num <- 5
chrom.size <- floor(loci/chrom.num)
#loci%% is the leftover from the rounding of the fractions. it is added to the
#end of the chromosome. because of this, the last chromosome will be longest
extra.genes <- loci%%chrom.num
#gen.struct stores chromosome length info. chrom.num is number of rows, 2 is
#number of columns
gen.struct <- matrix(NA, chrom.num, 2)
View(gen.struct)
or(i in 1:nrow(gen.struct)){
for(i in 1:nrow(gen.struct)){
# first column is length of first chromosome
gen.struct[i, 1] <- chrom.size*(i-1)+1
#second column is length of second chromosome
gen.struct[i, 2] <- chrom.size*i
}
gen.struct[chrom.num, 2] <- loci
#create a vector for rspots
rspots <- c()
#loop from 1 to the number of chromosomes
for(i in 1:chrom.num){
#this finds the recombination spots and stores it in rspots. finds it by
#sampling the first column [i,1] and the second column [i,2] and using +1 to
#indicate that recombination is happening at the loci after the division spot
rspots[i] <- sample((gen.struct[i, 1]+1):(gen.struct[i, 2]-1), 1)
}
#get recombination spots and length of genome when use get recomb function
results <- list(rspots, gen.struct)
View(results)
results[[2]]
#in parents list, sample 1- populationsize , size is twice the population size,
#replace= T becuase parents can have more than one offspring, probablility of
#parents reproducing is a function of fitness
parents <- sample(1:popsize, popsize*2, replace=T, prob=fitnesses)
fitnesses <- runif(100, min=0, max=1)
#in parents list, sample 1- populationsize , size is twice the population size,
#replace= T becuase parents can have more than one offspring, probablility of
#parents reproducing is a function of fitness
parents <- sample(1:popsize, popsize*2, replace=T, prob=fitnesses)
popsize <- 100
#in parents list, sample 1- populationsize , size is twice the population size,
#replace= T becuase parents can have more than one offspring, probablility of
#parents reproducing is a function of fitness
parents <- sample(1:popsize, popsize*2, replace=T, prob=fitnesses)
#stores recomb spots for second chromosome in gen.info list
gen.info <- GetRecomb(chrom.num, loci)[[2]]
gen.info <- results
#each time we make a gamete it gets stored in a list
gametes <- list()
gen.info <- results[[2]]
#this will work its way through each of the most fit parents we sampled
foo <- population[[parents[j]]]
View(foo)
View(gen.info)
recomb.spots <- results[[1]]
#start on row 1 or 2, sample all the chromosomes, can be used more than once
s.strand <- sample(1:2, chrom.num, replace=T)
#stores gamete in vector
gamete <- c()
for(i in 1:chrom.num){
#this tells us to sample the strand up to the recombination spot then switch strands at these assigned spots
#first starts at the beginning of the chromosome then goes to the recombination spot,
#switches chromosome then samples from the spot after the recombination spot up to the
#next stopping point the repeats up to the end of the chromosome
gamete <- c(gamete, c(foo[s.strand[i], gen.info[i,1]:recomb.spots[i]],
foo[GetOp(s.strand[i]),(recomb.spots[i]+1):gen.info[i,2]]))
}
# function that returns the opposite value that is being used.
# this is used to switch to the other chromosome
GetOp <- function(x){
if(x == 1) return(2)
if(x == 2) return(1)
}
for(i in 1:chrom.num){
#this tells us to sample the strand up to the recombination spot then switch strands at these assigned spots
#first starts at the beginning of the chromosome then goes to the recombination spot,
#switches chromosome then samples from the spot after the recombination spot up to the
#next stopping point the repeats up to the end of the chromosome
gamete <- c(gamete, c(foo[s.strand[i], gen.info[i,1]:recomb.spots[i]],
foo[GetOp(s.strand[i]),(recomb.spots[i]+1):gen.info[i,2]]))
}
j <- 1
#this will work its way through each of the most fit parents we sampled
foo <- population[[parents[j]]]
i <- 1
for(i in 1:chrom.num){
#this tells us to sample the strand up to the recombination spot then switch strands at these assigned spots
#first starts at the beginning of the chromosome then goes to the recombination spot,
#switches chromosome then samples from the spot after the recombination spot up to the
#next stopping point the repeats up to the end of the chromosome
gamete <- c(gamete, c(foo[s.strand[i], gen.info[i,1]:recomb.spots[i]],
foo[GetOp(s.strand[i]),(recomb.spots[i]+1):gen.info[i,2]]))
}
view(gamete)
print(gamete)
loci <- 100
popsize <- 100  #1000
chrom.num <- c(5, 10, 15, 20, 25)
generations <- 20   #250
#probbility that the favored phenotype for the environment will change
prob.change <- c(.01, .1, .3)
#loci that will impact the pheonotype
imp.loci <- sample(1:loci, 10)
#what phenotype is favored in the environment
fav.pheno <- runif(1, min=0, max=20)
iterations <- 4 #100
mut.rate <- .01
model <- c("additive"  , "epi.sign", "epi.inc","epi.dec")
#stores loci/ chromosome number in list depicting each chromosome size. floor
#rounds down so there is whole numbers
chrom.size <- floor(loci/chrom.num)
#loci%% is the leftover from the rounding of the fractions. it is added to the
#end of the chromosome. because of this, the last chromosome will be longest
extra.genes <- loci%%chrom.num
#gen.struct stores chromosome length info. chrom.num is number of rows, 2 is
#number of columns
gen.struct <- matrix(NA, chrom.num, 2)
for(i in 1:nrow(gen.struct)){
# first column is length of first chromosome
gen.struct[i, 1] <- chrom.size*(i-1)+1
#second column is length of second chromosome
gen.struct[i, 2] <- chrom.size*i
}
for(i in 1:nrow(gen.struct)){
# first column is length of first chromosome
gen.struct[i, 1] <- chrom.size*(i-1)+1
#second column is length of second chromosome
gen.struct[i, 2] <- chrom.size*i
}
chrom.size
#storing loci spots in both chromosomes
gen.struct[chrom.num, 2] <- loci
#create a vector for rspots
rspots <- c()
#loop from 1 to the number of chromosomes
for(i in 1:chrom.num){
#this finds the recombination spots and stores it in rspots. finds it by
#sampling the first column [i,1] and the second column [i,2] and using +1 to
#indicate that recombination is happening at the loci after the division spot
rspots[i] <- sample((gen.struct[i, 1]+1):(gen.struct[i, 2]-1), 1)
}
#get recombination spots and length of genome when use get recomb function
results <- list(rspots, gen.struct)
View(results)
#in parents list, sample 1- populationsize , size is twice the population size,
#replace= T becuase parents can have more than one offspring, probablility of
#parents reproducing is a function of fitness
parents <- sample(1:popsize, popsize*2, replace=T, prob=fitnesses)
setwd("~/Documents/env-stab/scripts")
loci <- 100
popsize <- 100  #1000
chrom.num <- c(5, 10, 15, 20, 25)
generations <- 20   #250
#probbility that the favored phenotype for the environment will change
prob.change <- c(.01, .1, .3)
#loci that will impact the pheonotype
imp.loci <- sample(1:loci, 10)
#what phenotype is favored in the environment
fav.pheno <- runif(1, min=0, max=20)
iterations <- 4 #100
mut.rate <- .01
model <- c("additive"  , "epi.sign", "epi.inc","epi.dec")
# function that gives recombination spots when given the chromosome
# number and loci
GetRecomb <- function(chrom.num,
loci){
#stores loci/ chromosome number in list depicting each chromosome size. floor
#rounds down so there is whole numbers
chrom.size <- floor(loci/chrom.num)
#loci%% is the leftover from the rounding of the fractions. it is added to the
#end of the chromosome. because of this, the last chromosome will be longest
extra.genes <- loci%%chrom.num
#gen.struct stores chromosome length info. chrom.num is number of rows, 2 is
#number of columns
## TODO: error when running this out of the box
gen.struct <- matrix(NA, chrom.num, 2)
for(i in 1:nrow(gen.struct)){
# first column is length of first chromosome
gen.struct[i, 1] <- chrom.size*(i-1)+1
#second column is length of second chromosome
gen.struct[i, 2] <- chrom.size*i
}
#storing loci spots in both chromosomes
gen.struct[chrom.num, 2] <- loci
#create a vector for rspots
rspots <- c()
#loop from 1 to the number of chromosomes
for(i in 1:chrom.num){
#this finds the recombination spots and stores it in rspots. finds it by
#sampling the first column [i,1] and the second column [i,2] and using +1 to
#indicate that recombination is happening at the loci after the division spot
rspots[i] <- sample((gen.struct[i, 1]+1):(gen.struct[i, 2]-1), 1)
}
#get recombination spots and length of genome when use get recomb function
results <- list(rspots, gen.struct)
#return recombination spots and gene structure from this function
return(results)
}
#in parents list, sample 1- populationsize , size is twice the population size,
#replace= T becuase parents can have more than one offspring, probablility of
#parents reproducing is a function of fitness
parents <- sample(1:popsize, popsize*2, replace=T, prob=fitnesses)
fitnesses <- runif(100, min = 0.5, max = 0.99)
#in parents list, sample 1- populationsize , size is twice the population size,
#replace= T becuase parents can have more than one offspring, probablility of
#parents reproducing is a function of fitness
parents <- sample(1:popsize, popsize*2, replace=T, prob=fitnesses)
#stores recomb spots for second chromosome in gen.info list
gen.info <- GetRecomb(chrom.num, loci)[[2]]
#each time we make a gamete it gets stored in a list
gametes <- list()
#loop
for(j in 1:length(parents)){
#this will work its way through each of the most fit parents we sampled
foo <- population[[parents[j]]]
# get the recombination points for a single meiosis
#stores recombination spots for chromosome one in recomb.spots list
recomb.spots <- GetRecomb(chrom.num, loci)[[1]]
#start on row 1 or 2, sample all the chromosomes, can be used more than once
s.strand <- sample(1:2, chrom.num, replace=T)
#stores gamete in vector
gamete <- c()
for(i in 1:chrom.num){
#this tells us to sample the strand up to the recombination spot then switch strands at these assigned spots
#first starts at the beginning of the chromosome then goes to the recombination spot,
#switches chromosome then samples from the spot after the recombination spot up to the
#next stopping point the repeats up to the end of the chromosome
gamete <- c(gamete, c(foo[s.strand[i], gen.info[i,1]:recomb.spots[i]],
foo[GetOp(s.strand[i]),(recomb.spots[i]+1):gen.info[i,2]]))
}
gametes[[j]] <- gamete
}
